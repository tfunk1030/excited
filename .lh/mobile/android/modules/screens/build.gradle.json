{
    "sourceFile": "mobile/android/modules/screens/build.gradle",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1736666213626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736666242033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,103 +1,23 @@\n-import com.android.Version\n-import groovy.json.JsonSlurper\n+def safeExtGet(prop, fallback) {\n+    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback\n+}\n \n buildscript {\n-    ext {\n-        rnsDefaultTargetSdkVersion = 34\n-        rnsDefaultCompileSdkVersion = 34\n-        rnsDefaultMinSdkVersion = 21\n-        rnsDefaultKotlinVersion = '1.8.0'\n-    }\n-    ext.safeExtGet = {prop, fallback ->\n-        def props = (prop instanceof String) ? [prop] : prop\n-        def result = props.find { key ->\n-            return rootProject.ext.has(key)\n-        }\n-        return result ? rootProject.ext.get(result) : fallback\n-    }\n     repositories {\n         google()\n         mavenCentral()\n     }\n     dependencies {\n-        classpath('com.android.tools.build:gradle:4.2.2')\n-        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:${safeExtGet('kotlinVersion', rnsDefaultKotlinVersion)}\"\n-        classpath \"com.diffplug.spotless:spotless-plugin-gradle:6.25.0\"\n+        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.24\"\n     }\n }\n \n-def isRunningInContextOfScreensRepo() {\n-    return project == rootProject\n-}\n-\n-def isNewArchitectureEnabled() {\n-    // To opt-in for the New Architecture, you can either:\n-    // - Set `newArchEnabled` to true inside the `gradle.properties` file\n-    // - Invoke gradle with `-newArchEnabled=true`\n-    // - Set an environment variable `ORG_GRADLE_PROJECT_newArchEnabled=true`\n-    return project.hasProperty(\"newArchEnabled\") && project.newArchEnabled == \"true\"\n-}\n-\n-def resolveReactNativeDirectory() {\n-    def userDefinedRnDirPath = safeAppExtGet(\"REACT_NATIVE_NODE_MODULES_DIR\", null)\n-    if (userDefinedRnDirPath != null) {\n-        return file(userDefinedRnDirPath)\n-    }\n-\n-    File standardRnDirFile = file(\"$rootDir/../node_modules/react-native/\")\n-    if (standardRnDirFile.exists()) {\n-        return standardRnDirFile\n-    }\n-\n-    // This is legacy code, I'm not sure why it works in certain scenarios but it was reported that one of our\n-    // projects needs this.\n-    File legacyRnDirFile = file(\"$projectDir/../node_modules/react-native/\")\n-    if (legacyRnDirFile.exists()) {\n-        return legacyRnDirFile\n-    }\n-\n-    // We're in non standard setup, e.g. monorepo - try to use node resolver to locate the react-native package.\n-    String maybeRnPackagePath = [\"node\", \"--print\", \"require.resolve('react-native/package.json')\"].execute(null, rootDir).text.trim()\n-\n-    File nodeResolverRnDirFile = null\n-    // file() constructor fails in case string is null or blank\n-    if (maybeRnPackagePath != null && !maybeRnPackagePath.isBlank()) {\n-        File maybeRnPackageFile = file(maybeRnPackagePath)\n-        if (maybeRnPackageFile.exists()) {\n-            nodeResolverRnDirFile = maybeRnPackageFile.parentFile\n-            return nodeResolverRnDirFile\n-        }\n-    }\n-\n-    throw new Exception(\"[RNScreens] Failed to resolve react-native directory. \" +\n-            \"Attempted locations: ${standardRnDirFile}, ${legacyRnDirFile} and ${nodeResolverRnDirFile}. \" +\n-            \"You should set project extension property (in `app/build.gradle`) `REACT_NATIVE_NODE_MODULES_DIR` with path to react-native.\")\n-}\n-\n-// spotless is only accessible within react-native-screens repo\n-if (isRunningInContextOfScreensRepo()) {\n-    apply from: 'spotless.gradle'\n-}\n-\n-if (isNewArchitectureEnabled()) {\n-    apply plugin: \"com.facebook.react\"\n-}\n apply plugin: 'com.android.library'\n apply plugin: 'kotlin-android'\n \n-def reactNativeArchitectures() {\n-    def value = project.getProperties().get(\"reactNativeArchitectures\")\n-    return value ? value.split(\",\") : [\"armeabi-v7a\", \"x86\", \"x86_64\", \"arm64-v8a\"]\n-}\n+def IS_NEW_ARCHITECTURE_ENABLED = project.hasProperty(\"newArchEnabled\") && project.newArchEnabled == \"true\"\n \n-def safeAppExtGet(prop, fallback) {\n-    def appProject = rootProject.allprojects.find { it.plugins.hasPlugin('com.android.application') }\n-    appProject?.ext?.has(prop) ? appProject.ext.get(prop) : fallback\n-}\n-\n-def IS_NEW_ARCHITECTURE_ENABLED = isNewArchitectureEnabled()\n-\n android {\n     compileSdkVersion safeExtGet('compileSdkVersion', rnsDefaultCompileSdkVersion)\n     namespace \"com.swmansion.rnscreens\"\n \n"
                },
                {
                    "date": 1736666263536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,29 +17,17 @@\n \n def IS_NEW_ARCHITECTURE_ENABLED = project.hasProperty(\"newArchEnabled\") && project.newArchEnabled == \"true\"\n \n android {\n-    compileSdkVersion safeExtGet('compileSdkVersion', rnsDefaultCompileSdkVersion)\n+    compileSdkVersion safeExtGet('compileSdkVersion', 34)\n     namespace \"com.swmansion.rnscreens\"\n \n-    // Used to override the NDK path/version on internal CI or by allowing\n-    // users to customize the NDK path/version from their root project (e.g. for M1 support)\n-    if (rootProject.hasProperty(\"ndkPath\")) {\n-        ndkPath rootProject.ext.ndkPath\n-    }\n-    if (rootProject.hasProperty(\"ndkVersion\")) {\n-        ndkVersion rootProject.ext.ndkVersion\n-    }\n-\n     defaultConfig {\n-        minSdkVersion safeExtGet(['minSdkVersion', 'minSdk'], rnsDefaultMinSdkVersion)\n-        targetSdkVersion safeExtGet(['targetSdkVersion', 'targetSdk'], rnsDefaultTargetSdkVersion)\n+        minSdkVersion safeExtGet('minSdkVersion', 21)\n+        targetSdkVersion safeExtGet('targetSdkVersion', 34)\n         versionCode 1\n         versionName \"1.0\"\n         buildConfigField \"boolean\", \"IS_NEW_ARCHITECTURE_ENABLED\", IS_NEW_ARCHITECTURE_ENABLED.toString()\n-        ndk {\n-            abiFilters (*reactNativeArchitectures())\n-        }\n         externalNativeBuild {\n             cmake {\n                 arguments \"-DANDROID_STL=c++_shared\",\n                         \"-DRNS_NEW_ARCH_ENABLED=${IS_NEW_ARCHITECTURE_ENABLED}\"\n"
                },
                {
                    "date": 1736666282582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n                 ]\n             }\n         }\n         res {\n-            if (safeExtGet(['compileSdkVersion', 'compileSdk'], rnsDefaultCompileSdkVersion) >= 33) {\n+            if (safeExtGet('compileSdkVersion', 34) >= 33) {\n                 srcDirs = [\"${androidResDir}/base\", \"${androidResDir}/v33\"]\n             } else {\n                 srcDirs = [\"${androidResDir}/base\"]\n             }\n"
                },
                {
                    "date": 1736666880240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+def safeExtGet(prop, fallback) {\n+    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback\n+}\n+\n+buildscript {\n+    repositories {\n+        google()\n+        mavenCentral()\n+    }\n+    dependencies {\n+        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.24\"\n+    }\n+}\n+\n+apply plugin: 'com.android.library'\n+apply plugin: 'kotlin-android'\n+\n+def IS_NEW_ARCHITECTURE_ENABLED = project.hasProperty(\"newArchEnabled\") && project.newArchEnabled == \"true\"\n+\n+android {\n+    compileSdkVersion safeExtGet('compileSdkVersion', 34)\n+    namespace \"com.swmansion.rnscreens\"\n+\n+    defaultConfig {\n+        minSdkVersion safeExtGet('minSdkVersion', 21)\n+        targetSdkVersion safeExtGet('targetSdkVersion', 34)\n+        versionCode 1\n+        versionName \"1.0\"\n+        buildConfigField \"boolean\", \"IS_NEW_ARCHITECTURE_ENABLED\", IS_NEW_ARCHITECTURE_ENABLED.toString()\n+        externalNativeBuild {\n+            cmake {\n+                arguments \"-DANDROID_STL=c++_shared\",\n+                        \"-DRNS_NEW_ARCH_ENABLED=${IS_NEW_ARCHITECTURE_ENABLED}\"\n+            }\n+        }\n+    }\n+    buildFeatures {\n+        prefab true\n+        buildConfig true\n+    }\n+    externalNativeBuild {\n+        cmake {\n+            path \"CMakeLists.txt\"\n+        }\n+    }\n+    lintOptions {\n+        abortOnError false\n+    }\n+    compileOptions {\n+        sourceCompatibility JavaVersion.VERSION_1_8\n+        targetCompatibility JavaVersion.VERSION_1_8\n+    }\n+    packagingOptions {\n+        // For some reason gradle only complains about the duplicated version of libreact_render libraries\n+        // while there are more libraries copied in intermediates folder of the lib build directory, we exclude\n+        // only the ones that make the build fail (ideally we should only include librnscreens_modules but we\n+        // are only allowed to specify exclude patterns)\n+        excludes = [\n+                \"META-INF\",\n+                \"META-INF/**\",\n+                \"**/libjsi.so\",\n+                \"**/libc++_shared.so\",\n+                \"**/libreact_render*.so\",\n+                \"**/libreactnativejni.so\",\n+                \"**/libreact_performance_timeline.so\",\n+                // In 0.76 multiple react-native's libraries were merged and these are the main new artifacts we're using.\n+                // Some of above lib* names could be removed after we remove support for 0.76.\n+                // https://github.com/facebook/react-native/pull/43909\n+                // https://github.com/facebook/react-native/pull/46059\n+                \"**/libfbjni.so\", \n+                \"**/libreactnative.so\"\n+        ]\n+    }\n+    sourceSets.main {\n+        ext.androidResDir = \"src/main/res\"\n+        java {\n+            if (IS_NEW_ARCHITECTURE_ENABLED) {\n+                srcDirs += [\n+                    \"src/fabric/java\",\n+                ]\n+            } else {\n+                srcDirs += [\n+                    \"src/paper/java\",\n+                ]\n+            }\n+        }\n+        res {\n+            if (safeExtGet('compileSdkVersion', 34) >= 33) {\n+                srcDirs = [\"${androidResDir}/base\", \"${androidResDir}/v33\"]\n+            } else {\n+                srcDirs = [\"${androidResDir}/base\"]\n+            }\n+        }\n+    }\n+}\n+\n+repositories {\n+    mavenCentral()\n+    google()\n+    maven {\n+        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm\n+        url \"$rootDir/../node_modules/react-native/android\"\n+    }\n+    maven {\n+        // Android JSC is installed from npm\n+        url \"$rootDir/../node_modules/jsc-android/dist\"\n+    }\n+    maven {\n+        // Local Maven repo containing AAR files\n+        url \"$rootDir/../node_modules/react-native/android/maven\"\n+    }\n+    maven {\n+        url 'https://www.jitpack.io'\n+    }\n+}\n+\n+dependencies {\n+    implementation 'com.facebook.react:react-native:+'\n+    implementation 'androidx.appcompat:appcompat:1.6.1'\n+    implementation 'androidx.fragment:fragment-ktx:1.6.1'\n+    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.2.0'\n+    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'\n+    implementation 'com.google.android.material:material:1.6.1'\n+    implementation \"androidx.core:core-ktx:1.8.0\"\n+\n+    constraints {\n+        implementation(\"androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1\") {\n+            because(\"on older React Native versions this dependency conflicts with react-native-screens\")\n+        }\n+    }\n+}\n"
                },
                {
                    "date": 1736666893290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,9 @@\n     }\n }\n \n dependencies {\n-    implementation 'com.facebook.react:react-native:+'\n+    compileOnly 'com.facebook.react:react-native:+'\n     implementation 'androidx.appcompat:appcompat:1.6.1'\n     implementation 'androidx.fragment:fragment-ktx:1.6.1'\n     implementation 'androidx.coordinatorlayout:coordinatorlayout:1.2.0'\n     implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'\n@@ -128,130 +128,4 @@\n             because(\"on older React Native versions this dependency conflicts with react-native-screens\")\n         }\n     }\n }\n-def safeExtGet(prop, fallback) {\n-    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback\n-}\n-\n-buildscript {\n-    repositories {\n-        google()\n-        mavenCentral()\n-    }\n-    dependencies {\n-        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.24\"\n-    }\n-}\n-\n-apply plugin: 'com.android.library'\n-apply plugin: 'kotlin-android'\n-\n-def IS_NEW_ARCHITECTURE_ENABLED = project.hasProperty(\"newArchEnabled\") && project.newArchEnabled == \"true\"\n-\n-android {\n-    compileSdkVersion safeExtGet('compileSdkVersion', 34)\n-    namespace \"com.swmansion.rnscreens\"\n-\n-    defaultConfig {\n-        minSdkVersion safeExtGet('minSdkVersion', 21)\n-        targetSdkVersion safeExtGet('targetSdkVersion', 34)\n-        versionCode 1\n-        versionName \"1.0\"\n-        buildConfigField \"boolean\", \"IS_NEW_ARCHITECTURE_ENABLED\", IS_NEW_ARCHITECTURE_ENABLED.toString()\n-        externalNativeBuild {\n-            cmake {\n-                arguments \"-DANDROID_STL=c++_shared\",\n-                        \"-DRNS_NEW_ARCH_ENABLED=${IS_NEW_ARCHITECTURE_ENABLED}\"\n-            }\n-        }\n-    }\n-    buildFeatures {\n-        prefab true\n-        buildConfig true\n-    }\n-    externalNativeBuild {\n-        cmake {\n-            path \"CMakeLists.txt\"\n-        }\n-    }\n-    lintOptions {\n-        abortOnError false\n-    }\n-    compileOptions {\n-        sourceCompatibility JavaVersion.VERSION_1_8\n-        targetCompatibility JavaVersion.VERSION_1_8\n-    }\n-    packagingOptions {\n-        // For some reason gradle only complains about the duplicated version of libreact_render libraries\n-        // while there are more libraries copied in intermediates folder of the lib build directory, we exclude\n-        // only the ones that make the build fail (ideally we should only include librnscreens_modules but we\n-        // are only allowed to specify exclude patterns)\n-        excludes = [\n-                \"META-INF\",\n-                \"META-INF/**\",\n-                \"**/libjsi.so\",\n-                \"**/libc++_shared.so\",\n-                \"**/libreact_render*.so\",\n-                \"**/libreactnativejni.so\",\n-                \"**/libreact_performance_timeline.so\",\n-                // In 0.76 multiple react-native's libraries were merged and these are the main new artifacts we're using.\n-                // Some of above lib* names could be removed after we remove support for 0.76.\n-                // https://github.com/facebook/react-native/pull/43909\n-                // https://github.com/facebook/react-native/pull/46059\n-                \"**/libfbjni.so\", \n-                \"**/libreactnative.so\"\n-        ]\n-    }\n-    sourceSets.main {\n-        ext.androidResDir = \"src/main/res\"\n-        java {\n-            if (IS_NEW_ARCHITECTURE_ENABLED) {\n-                srcDirs += [\n-                    \"src/fabric/java\",\n-                ]\n-            } else {\n-                srcDirs += [\n-                    \"src/paper/java\",\n-                ]\n-            }\n-        }\n-        res {\n-            if (safeExtGet('compileSdkVersion', 34) >= 33) {\n-                srcDirs = [\"${androidResDir}/base\", \"${androidResDir}/v33\"]\n-            } else {\n-                srcDirs = [\"${androidResDir}/base\"]\n-            }\n-        }\n-    }\n-}\n-\n-repositories {\n-    maven {\n-        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm\n-        url \"$rootDir/../../node_modules/react-native/android\"\n-    }\n-    maven {\n-        // Android JSC is installed from npm\n-        url \"$rootDir/../../node_modules/jsc-android/dist\"\n-    }\n-\n-    mavenCentral()\n-    mavenLocal()\n-    google()\n-}\n-\n-dependencies {\n-    implementation 'com.facebook.react:react-native:+'\n-    implementation 'androidx.appcompat:appcompat:1.6.1'\n-    implementation 'androidx.fragment:fragment-ktx:1.6.1'\n-    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.2.0'\n-    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'\n-    implementation 'com.google.android.material:material:1.6.1'\n-    implementation \"androidx.core:core-ktx:1.8.0\"\n-\n-    constraints {\n-        implementation(\"androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1\") {\n-            because(\"on older React Native versions this dependency conflicts with react-native-screens\")\n-        }\n-    }\n-}\n"
                },
                {
                    "date": 1736667189051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,29 +70,32 @@\n                 \"**/libfbjni.so\", \n                 \"**/libreactnative.so\"\n         ]\n     }\n-    sourceSets.main {\n-        ext.androidResDir = \"src/main/res\"\n-        java {\n-            if (IS_NEW_ARCHITECTURE_ENABLED) {\n-                srcDirs += [\n-                    \"src/fabric/java\",\n-                ]\n-            } else {\n-                srcDirs += [\n-                    \"src/paper/java\",\n-                ]\n+    sourceSets {\n+        main {\n+            java {\n+                if (IS_NEW_ARCHITECTURE_ENABLED) {\n+                    srcDirs += [\n+                        \"src/fabric/java\",\n+                    ]\n+                } else {\n+                    srcDirs += [\n+                        \"src/paper/java\",\n+                    ]\n+                }\n+                exclude '**/bin/**'\n             }\n-        }\n-        res {\n-            if (safeExtGet('compileSdkVersion', 34) >= 33) {\n-                srcDirs = [\"${androidResDir}/base\", \"${androidResDir}/v33\"]\n-            } else {\n-                srcDirs = [\"${androidResDir}/base\"]\n+            res {\n+                if (safeExtGet('compileSdkVersion', 34) >= 33) {\n+                    srcDirs = [\"${androidResDir}/base\", \"${androidResDir}/v33\"]\n+                } else {\n+                    srcDirs = [\"${androidResDir}/base\"]\n+                }\n             }\n         }\n     }\n+    }\n }\n \n repositories {\n     mavenCentral()\n"
                },
                {
                    "date": 1736667201661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,8 @@\n                 }\n             }\n         }\n     }\n-    }\n }\n \n repositories {\n     mavenCentral()\n"
                },
                {
                    "date": 1736667232924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+def safeExtGet(prop, fallback) {\n+    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback\n+}\n+\n+buildscript {\n+    repositories {\n+        google()\n+        mavenCentral()\n+    }\n+    dependencies {\n+        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.24\"\n+    }\n+}\n+\n+apply plugin: 'com.android.library'\n+apply plugin: 'kotlin-android'\n+\n+def IS_NEW_ARCHITECTURE_ENABLED = project.hasProperty(\"newArchEnabled\") && project.newArchEnabled == \"true\"\n+\n+android {\n+    compileSdkVersion safeExtGet('compileSdkVersion', 34)\n+    namespace \"com.swmansion.rnscreens\"\n+\n+    defaultConfig {\n+        minSdkVersion safeExtGet('minSdkVersion', 21)\n+        targetSdkVersion safeExtGet('targetSdkVersion', 34)\n+        versionCode 1\n+        versionName \"1.0\"\n+        buildConfigField \"boolean\", \"IS_NEW_ARCHITECTURE_ENABLED\", IS_NEW_ARCHITECTURE_ENABLED.toString()\n+        externalNativeBuild {\n+            cmake {\n+                arguments \"-DANDROID_STL=c++_shared\",\n+                        \"-DRNS_NEW_ARCH_ENABLED=${IS_NEW_ARCHITECTURE_ENABLED}\"\n+            }\n+        }\n+    }\n+    buildFeatures {\n+        prefab true\n+        buildConfig true\n+    }\n+    externalNativeBuild {\n+        cmake {\n+            path \"CMakeLists.txt\"\n+        }\n+    }\n+    lintOptions {\n+        abortOnError false\n+    }\n+    compileOptions {\n+        sourceCompatibility JavaVersion.VERSION_1_8\n+        targetCompatibility JavaVersion.VERSION_1_8\n+    }\n+    packagingOptions {\n+        // For some reason gradle only complains about the duplicated version of libreact_render libraries\n+        // while there are more libraries copied in intermediates folder of the lib build directory, we exclude\n+        // only the ones that make the build fail (ideally we should only include librnscreens_modules but we\n+        // are only allowed to specify exclude patterns)\n+        excludes = [\n+                \"META-INF\",\n+                \"META-INF/**\",\n+                \"**/libjsi.so\",\n+                \"**/libc++_shared.so\",\n+                \"**/libreact_render*.so\",\n+                \"**/libreactnativejni.so\",\n+                \"**/libreact_performance_timeline.so\",\n+                // In 0.76 multiple react-native's libraries were merged and these are the main new artifacts we're using.\n+                // Some of above lib* names could be removed after we remove support for 0.76.\n+                // https://github.com/facebook/react-native/pull/43909\n+                // https://github.com/facebook/react-native/pull/46059\n+                \"**/libfbjni.so\", \n+                \"**/libreactnative.so\"\n+        ]\n+    }\n+    def androidResDir = \"src/main/res\"\n+    sourceSets {\n+        main {\n+            java {\n+                if (IS_NEW_ARCHITECTURE_ENABLED) {\n+                    srcDirs += [\n+                        \"src/fabric/java\",\n+                    ]\n+                } else {\n+                    srcDirs += [\n+                        \"src/paper/java\",\n+                    ]\n+                }\n+                exclude '**/bin/**'\n+            }\n+            res {\n+                if (safeExtGet('compileSdkVersion', 34) >= 33) {\n+                    srcDirs = [\"${androidResDir}/base\", \"${androidResDir}/v33\"]\n+                } else {\n+                    srcDirs = [\"${androidResDir}/base\"]\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+repositories {\n+    mavenCentral()\n+    google()\n+    maven {\n+        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm\n+        url \"$rootDir/../node_modules/react-native/android\"\n+    }\n+    maven {\n+        // Android JSC is installed from npm\n+        url \"$rootDir/../node_modules/jsc-android/dist\"\n+    }\n+    maven {\n+        // Local Maven repo containing AAR files\n+        url \"$rootDir/../node_modules/react-native/android/maven\"\n+    }\n+    maven {\n+        url 'https://www.jitpack.io'\n+    }\n+}\n+\n+dependencies {\n+    compileOnly 'com.facebook.react:react-native:+'\n+    implementation 'androidx.appcompat:appcompat:1.6.1'\n+    implementation 'androidx.fragment:fragment-ktx:1.6.1'\n+    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.2.0'\n+    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'\n+    implementation 'com.google.android.material:material:1.6.1'\n+    implementation \"androidx.core:core-ktx:1.8.0\"\n+\n+    constraints {\n+        implementation(\"androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1\") {\n+            because(\"on older React Native versions this dependency conflicts with react-native-screens\")\n+        }\n+    }\n+}\n"
                }
            ],
            "date": 1736666213626,
            "name": "Commit-0",
            "content": "import com.android.Version\nimport groovy.json.JsonSlurper\n\nbuildscript {\n    ext {\n        rnsDefaultTargetSdkVersion = 34\n        rnsDefaultCompileSdkVersion = 34\n        rnsDefaultMinSdkVersion = 21\n        rnsDefaultKotlinVersion = '1.8.0'\n    }\n    ext.safeExtGet = {prop, fallback ->\n        def props = (prop instanceof String) ? [prop] : prop\n        def result = props.find { key ->\n            return rootProject.ext.has(key)\n        }\n        return result ? rootProject.ext.get(result) : fallback\n    }\n    repositories {\n        google()\n        mavenCentral()\n    }\n    dependencies {\n        classpath('com.android.tools.build:gradle:4.2.2')\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:${safeExtGet('kotlinVersion', rnsDefaultKotlinVersion)}\"\n        classpath \"com.diffplug.spotless:spotless-plugin-gradle:6.25.0\"\n    }\n}\n\ndef isRunningInContextOfScreensRepo() {\n    return project == rootProject\n}\n\ndef isNewArchitectureEnabled() {\n    // To opt-in for the New Architecture, you can either:\n    // - Set `newArchEnabled` to true inside the `gradle.properties` file\n    // - Invoke gradle with `-newArchEnabled=true`\n    // - Set an environment variable `ORG_GRADLE_PROJECT_newArchEnabled=true`\n    return project.hasProperty(\"newArchEnabled\") && project.newArchEnabled == \"true\"\n}\n\ndef resolveReactNativeDirectory() {\n    def userDefinedRnDirPath = safeAppExtGet(\"REACT_NATIVE_NODE_MODULES_DIR\", null)\n    if (userDefinedRnDirPath != null) {\n        return file(userDefinedRnDirPath)\n    }\n\n    File standardRnDirFile = file(\"$rootDir/../node_modules/react-native/\")\n    if (standardRnDirFile.exists()) {\n        return standardRnDirFile\n    }\n\n    // This is legacy code, I'm not sure why it works in certain scenarios but it was reported that one of our\n    // projects needs this.\n    File legacyRnDirFile = file(\"$projectDir/../node_modules/react-native/\")\n    if (legacyRnDirFile.exists()) {\n        return legacyRnDirFile\n    }\n\n    // We're in non standard setup, e.g. monorepo - try to use node resolver to locate the react-native package.\n    String maybeRnPackagePath = [\"node\", \"--print\", \"require.resolve('react-native/package.json')\"].execute(null, rootDir).text.trim()\n\n    File nodeResolverRnDirFile = null\n    // file() constructor fails in case string is null or blank\n    if (maybeRnPackagePath != null && !maybeRnPackagePath.isBlank()) {\n        File maybeRnPackageFile = file(maybeRnPackagePath)\n        if (maybeRnPackageFile.exists()) {\n            nodeResolverRnDirFile = maybeRnPackageFile.parentFile\n            return nodeResolverRnDirFile\n        }\n    }\n\n    throw new Exception(\"[RNScreens] Failed to resolve react-native directory. \" +\n            \"Attempted locations: ${standardRnDirFile}, ${legacyRnDirFile} and ${nodeResolverRnDirFile}. \" +\n            \"You should set project extension property (in `app/build.gradle`) `REACT_NATIVE_NODE_MODULES_DIR` with path to react-native.\")\n}\n\n// spotless is only accessible within react-native-screens repo\nif (isRunningInContextOfScreensRepo()) {\n    apply from: 'spotless.gradle'\n}\n\nif (isNewArchitectureEnabled()) {\n    apply plugin: \"com.facebook.react\"\n}\napply plugin: 'com.android.library'\napply plugin: 'kotlin-android'\n\ndef reactNativeArchitectures() {\n    def value = project.getProperties().get(\"reactNativeArchitectures\")\n    return value ? value.split(\",\") : [\"armeabi-v7a\", \"x86\", \"x86_64\", \"arm64-v8a\"]\n}\n\ndef safeAppExtGet(prop, fallback) {\n    def appProject = rootProject.allprojects.find { it.plugins.hasPlugin('com.android.application') }\n    appProject?.ext?.has(prop) ? appProject.ext.get(prop) : fallback\n}\n\ndef IS_NEW_ARCHITECTURE_ENABLED = isNewArchitectureEnabled()\n\nandroid {\n    compileSdkVersion safeExtGet('compileSdkVersion', rnsDefaultCompileSdkVersion)\n    namespace \"com.swmansion.rnscreens\"\n\n    // Used to override the NDK path/version on internal CI or by allowing\n    // users to customize the NDK path/version from their root project (e.g. for M1 support)\n    if (rootProject.hasProperty(\"ndkPath\")) {\n        ndkPath rootProject.ext.ndkPath\n    }\n    if (rootProject.hasProperty(\"ndkVersion\")) {\n        ndkVersion rootProject.ext.ndkVersion\n    }\n\n    defaultConfig {\n        minSdkVersion safeExtGet(['minSdkVersion', 'minSdk'], rnsDefaultMinSdkVersion)\n        targetSdkVersion safeExtGet(['targetSdkVersion', 'targetSdk'], rnsDefaultTargetSdkVersion)\n        versionCode 1\n        versionName \"1.0\"\n        buildConfigField \"boolean\", \"IS_NEW_ARCHITECTURE_ENABLED\", IS_NEW_ARCHITECTURE_ENABLED.toString()\n        ndk {\n            abiFilters (*reactNativeArchitectures())\n        }\n        externalNativeBuild {\n            cmake {\n                arguments \"-DANDROID_STL=c++_shared\",\n                        \"-DRNS_NEW_ARCH_ENABLED=${IS_NEW_ARCHITECTURE_ENABLED}\"\n            }\n        }\n    }\n    buildFeatures {\n        prefab true\n        buildConfig true\n    }\n    externalNativeBuild {\n        cmake {\n            path \"CMakeLists.txt\"\n        }\n    }\n    lintOptions {\n        abortOnError false\n    }\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n    packagingOptions {\n        // For some reason gradle only complains about the duplicated version of libreact_render libraries\n        // while there are more libraries copied in intermediates folder of the lib build directory, we exclude\n        // only the ones that make the build fail (ideally we should only include librnscreens_modules but we\n        // are only allowed to specify exclude patterns)\n        excludes = [\n                \"META-INF\",\n                \"META-INF/**\",\n                \"**/libjsi.so\",\n                \"**/libc++_shared.so\",\n                \"**/libreact_render*.so\",\n                \"**/libreactnativejni.so\",\n                \"**/libreact_performance_timeline.so\",\n                // In 0.76 multiple react-native's libraries were merged and these are the main new artifacts we're using.\n                // Some of above lib* names could be removed after we remove support for 0.76.\n                // https://github.com/facebook/react-native/pull/43909\n                // https://github.com/facebook/react-native/pull/46059\n                \"**/libfbjni.so\", \n                \"**/libreactnative.so\"\n        ]\n    }\n    sourceSets.main {\n        ext.androidResDir = \"src/main/res\"\n        java {\n            if (IS_NEW_ARCHITECTURE_ENABLED) {\n                srcDirs += [\n                    \"src/fabric/java\",\n                ]\n            } else {\n                srcDirs += [\n                    \"src/paper/java\",\n                ]\n            }\n        }\n        res {\n            if (safeExtGet(['compileSdkVersion', 'compileSdk'], rnsDefaultCompileSdkVersion) >= 33) {\n                srcDirs = [\"${androidResDir}/base\", \"${androidResDir}/v33\"]\n            } else {\n                srcDirs = [\"${androidResDir}/base\"]\n            }\n        }\n    }\n}\n\nrepositories {\n    maven {\n        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm\n        url \"$rootDir/../../node_modules/react-native/android\"\n    }\n    maven {\n        // Android JSC is installed from npm\n        url \"$rootDir/../../node_modules/jsc-android/dist\"\n    }\n\n    mavenCentral()\n    mavenLocal()\n    google()\n}\n\ndependencies {\n    implementation 'com.facebook.react:react-native:+'\n    implementation 'androidx.appcompat:appcompat:1.6.1'\n    implementation 'androidx.fragment:fragment-ktx:1.6.1'\n    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.2.0'\n    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'\n    implementation 'com.google.android.material:material:1.6.1'\n    implementation \"androidx.core:core-ktx:1.8.0\"\n\n    constraints {\n        implementation(\"androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1\") {\n            because(\"on older React Native versions this dependency conflicts with react-native-screens\")\n        }\n    }\n}\n"
        }
    ]
}