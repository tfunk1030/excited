{
    "sourceFile": "mobile/src/services/weatherService.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1736575836338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736576119099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     deg: number;\r\n   };\r\n }\r\n \r\n-const WEATHER_API_KEY = Config.WEATHER_API_KEY;\r\n+const WEATHER_API_KEY = Config.OPENWEATHER_API_KEY;\r\n const WEATHER_API_URL = 'https://api.openweathermap.org/data/2.5/weather';\r\n \r\n const calculateAirDensity = (\r\n   temperature: number,\r\n"
                }
            ],
            "date": 1736575836338,
            "name": "Commit-0",
            "content": "import { useState, useEffect, useCallback } from 'react';\r\nimport * as Location from 'expo-location';\r\nimport Config from 'react-native-config';\r\n\r\nexport interface WeatherData {\r\n  temperature: number;\r\n  feelsLike: number;\r\n  humidity: number;\r\n  pressure: number;\r\n  altitude: number;\r\n  windSpeed: number;\r\n  windDirection: number;\r\n  airDensity: number;\r\n}\r\n\r\ninterface WeatherResponse {\r\n  main: {\r\n    temp: number;\r\n    feels_like: number;\r\n    humidity: number;\r\n    pressure: number;\r\n  };\r\n  wind: {\r\n    speed: number;\r\n    deg: number;\r\n  };\r\n}\r\n\r\nconst WEATHER_API_KEY = Config.WEATHER_API_KEY;\r\nconst WEATHER_API_URL = 'https://api.openweathermap.org/data/2.5/weather';\r\n\r\nconst calculateAirDensity = (\r\n  temperature: number,\r\n  pressure: number,\r\n  altitude: number\r\n): number => {\r\n  // Standard temperature lapse rate (°C/m)\r\n  const lapseRate = 0.0065;\r\n  \r\n  // Convert temperature to Kelvin\r\n  const tempK = temperature + 273.15;\r\n  \r\n  // Standard atmospheric pressure at sea level (Pa)\r\n  const p0 = 101325;\r\n  \r\n  // Gas constant for air (J/(kg·K))\r\n  const R = 287.05;\r\n  \r\n  // Gravitational acceleration (m/s²)\r\n  const g = 9.80665;\r\n  \r\n  // Calculate air density using the barometric formula\r\n  const density = (pressure * 100) / (R * tempK) * \r\n    Math.exp((-g * altitude) / (R * tempK));\r\n  \r\n  return density;\r\n};\r\n\r\nexport const useWeatherData = () => {\r\n  const [weatherData, setWeatherData] = useState<WeatherData | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchWeatherData = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // Get current location\r\n      const { status } = await Location.requestForegroundPermissionsAsync();\r\n      if (status !== 'granted') {\r\n        throw new Error('Location permission denied');\r\n      }\r\n\r\n      const location = await Location.getCurrentPositionAsync({});\r\n      const { latitude, longitude, altitude } = location.coords;\r\n\r\n      // Fetch weather data\r\n      const response = await fetch(\r\n        `${WEATHER_API_URL}?lat=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}&units=metric`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch weather data');\r\n      }\r\n\r\n      const data: WeatherResponse = await response.json();\r\n\r\n      // Calculate air density\r\n      const airDensity = calculateAirDensity(\r\n        data.main.temp,\r\n        data.main.pressure,\r\n        altitude || 0\r\n      );\r\n\r\n      setWeatherData({\r\n        temperature: data.main.temp,\r\n        feelsLike: data.main.feels_like,\r\n        humidity: data.main.humidity,\r\n        pressure: data.main.pressure,\r\n        altitude: altitude || 0,\r\n        windSpeed: data.wind.speed,\r\n        windDirection: data.wind.deg,\r\n        airDensity,\r\n      });\r\n\r\n      setError(null);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to fetch weather data');\r\n      console.error('Weather fetch error:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchWeatherData();\r\n\r\n    // Refresh weather data every 5 minutes\r\n    const interval = setInterval(fetchWeatherData, 5 * 60 * 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [fetchWeatherData]);\r\n\r\n  return {\r\n    weatherData,\r\n    loading,\r\n    error,\r\n    refresh: fetchWeatherData,\r\n  };\r\n};\r\n"
        }
    ]
}